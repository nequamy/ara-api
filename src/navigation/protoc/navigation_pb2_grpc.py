# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from navigation.protoc import navigation_pb2 as navigation__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in navigation_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class NavigationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetVelocity = channel.unary_stream(
                '/NavigationService/SetVelocity',
                request_serializer=navigation__pb2.VelocityRequest.SerializeToString,
                response_deserializer=navigation__pb2.VelocityResponse.FromString,
                _registered_method=True)
        self.SetTargetPosition = channel.unary_stream(
                '/NavigationService/SetTargetPosition',
                request_serializer=navigation__pb2.PositionRequest.SerializeToString,
                response_deserializer=navigation__pb2.PositionResponse.FromString,
                _registered_method=True)
        self.SetTargetAltitude = channel.unary_stream(
                '/NavigationService/SetTargetAltitude',
                request_serializer=navigation__pb2.AltitudeRequest.SerializeToString,
                response_deserializer=navigation__pb2.AltitudeResponse.FromString,
                _registered_method=True)
        self.Takeoff = channel.unary_stream(
                '/NavigationService/Takeoff',
                request_serializer=navigation__pb2.TakeoffRequest.SerializeToString,
                response_deserializer=navigation__pb2.TakeoffResponse.FromString,
                _registered_method=True)
        self.Land = channel.unary_stream(
                '/NavigationService/Land',
                request_serializer=navigation__pb2.LandRequest.SerializeToString,
                response_deserializer=navigation__pb2.LandResponse.FromString,
                _registered_method=True)


class NavigationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetVelocity(self, request, context):
        """Задание скорости по x и y
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTargetPosition(self, request, context):
        """Задание целевой точки
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTargetAltitude(self, request, context):
        """Задание целевой высоты
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Takeoff(self, request, context):
        """Взлет на определенную высоту
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Land(self, request, context):
        """Посадка
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NavigationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetVelocity': grpc.unary_stream_rpc_method_handler(
                    servicer.SetVelocity,
                    request_deserializer=navigation__pb2.VelocityRequest.FromString,
                    response_serializer=navigation__pb2.VelocityResponse.SerializeToString,
            ),
            'SetTargetPosition': grpc.unary_stream_rpc_method_handler(
                    servicer.SetTargetPosition,
                    request_deserializer=navigation__pb2.PositionRequest.FromString,
                    response_serializer=navigation__pb2.PositionResponse.SerializeToString,
            ),
            'SetTargetAltitude': grpc.unary_stream_rpc_method_handler(
                    servicer.SetTargetAltitude,
                    request_deserializer=navigation__pb2.AltitudeRequest.FromString,
                    response_serializer=navigation__pb2.AltitudeResponse.SerializeToString,
            ),
            'Takeoff': grpc.unary_stream_rpc_method_handler(
                    servicer.Takeoff,
                    request_deserializer=navigation__pb2.TakeoffRequest.FromString,
                    response_serializer=navigation__pb2.TakeoffResponse.SerializeToString,
            ),
            'Land': grpc.unary_stream_rpc_method_handler(
                    servicer.Land,
                    request_deserializer=navigation__pb2.LandRequest.FromString,
                    response_serializer=navigation__pb2.LandResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'NavigationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('NavigationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NavigationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetVelocity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/NavigationService/SetVelocity',
            navigation__pb2.VelocityRequest.SerializeToString,
            navigation__pb2.VelocityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTargetPosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/NavigationService/SetTargetPosition',
            navigation__pb2.PositionRequest.SerializeToString,
            navigation__pb2.PositionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTargetAltitude(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/NavigationService/SetTargetAltitude',
            navigation__pb2.AltitudeRequest.SerializeToString,
            navigation__pb2.AltitudeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Takeoff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/NavigationService/Takeoff',
            navigation__pb2.TakeoffRequest.SerializeToString,
            navigation__pb2.TakeoffResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Land(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/NavigationService/Land',
            navigation__pb2.LandRequest.SerializeToString,
            navigation__pb2.LandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
