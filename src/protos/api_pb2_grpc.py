# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import api_pb2 as api__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DriverManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetImuDataRPC = channel.unary_unary(
                '/DriverManager/GetImuDataRPC',
                request_serializer=api__pb2.GetRequest.SerializeToString,
                response_deserializer=api__pb2.IMUData.FromString,
                _registered_method=True)
        self.GetSonarDataRPC = channel.unary_unary(
                '/DriverManager/GetSonarDataRPC',
                request_serializer=api__pb2.GetRequest.SerializeToString,
                response_deserializer=api__pb2.SonarData.FromString,
                _registered_method=True)
        self.GetAnalogDataRPC = channel.unary_unary(
                '/DriverManager/GetAnalogDataRPC',
                request_serializer=api__pb2.GetRequest.SerializeToString,
                response_deserializer=api__pb2.AnalogData.FromString,
                _registered_method=True)
        self.GetAttitudeDataRPC = channel.unary_unary(
                '/DriverManager/GetAttitudeDataRPC',
                request_serializer=api__pb2.GetRequest.SerializeToString,
                response_deserializer=api__pb2.AttitudeData.FromString,
                _registered_method=True)
        self.GetOdometryDataRPC = channel.unary_unary(
                '/DriverManager/GetOdometryDataRPC',
                request_serializer=api__pb2.GetRequest.SerializeToString,
                response_deserializer=api__pb2.OdometryData.FromString,
                _registered_method=True)
        self.GetOpticalFlowDataRPC = channel.unary_unary(
                '/DriverManager/GetOpticalFlowDataRPC',
                request_serializer=api__pb2.GetRequest.SerializeToString,
                response_deserializer=api__pb2.OpticalFlowData.FromString,
                _registered_method=True)
        self.GetFlagsDataRPC = channel.unary_unary(
                '/DriverManager/GetFlagsDataRPC',
                request_serializer=api__pb2.GetRequest.SerializeToString,
                response_deserializer=api__pb2.FlagsData.FromString,
                _registered_method=True)
        self.SendRcDataRPC = channel.unary_unary(
                '/DriverManager/SendRcDataRPC',
                request_serializer=api__pb2.RcDataData.SerializeToString,
                response_deserializer=api__pb2.StatusData.FromString,
                _registered_method=True)


class DriverManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetImuDataRPC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSonarDataRPC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAnalogDataRPC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAttitudeDataRPC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOdometryDataRPC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOpticalFlowDataRPC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFlagsDataRPC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendRcDataRPC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DriverManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetImuDataRPC': grpc.unary_unary_rpc_method_handler(
                    servicer.GetImuDataRPC,
                    request_deserializer=api__pb2.GetRequest.FromString,
                    response_serializer=api__pb2.IMUData.SerializeToString,
            ),
            'GetSonarDataRPC': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSonarDataRPC,
                    request_deserializer=api__pb2.GetRequest.FromString,
                    response_serializer=api__pb2.SonarData.SerializeToString,
            ),
            'GetAnalogDataRPC': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAnalogDataRPC,
                    request_deserializer=api__pb2.GetRequest.FromString,
                    response_serializer=api__pb2.AnalogData.SerializeToString,
            ),
            'GetAttitudeDataRPC': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAttitudeDataRPC,
                    request_deserializer=api__pb2.GetRequest.FromString,
                    response_serializer=api__pb2.AttitudeData.SerializeToString,
            ),
            'GetOdometryDataRPC': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOdometryDataRPC,
                    request_deserializer=api__pb2.GetRequest.FromString,
                    response_serializer=api__pb2.OdometryData.SerializeToString,
            ),
            'GetOpticalFlowDataRPC': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOpticalFlowDataRPC,
                    request_deserializer=api__pb2.GetRequest.FromString,
                    response_serializer=api__pb2.OpticalFlowData.SerializeToString,
            ),
            'GetFlagsDataRPC': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFlagsDataRPC,
                    request_deserializer=api__pb2.GetRequest.FromString,
                    response_serializer=api__pb2.FlagsData.SerializeToString,
            ),
            'SendRcDataRPC': grpc.unary_unary_rpc_method_handler(
                    servicer.SendRcDataRPC,
                    request_deserializer=api__pb2.RcDataData.FromString,
                    response_serializer=api__pb2.StatusData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DriverManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('DriverManager', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DriverManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetImuDataRPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DriverManager/GetImuDataRPC',
            api__pb2.GetRequest.SerializeToString,
            api__pb2.IMUData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSonarDataRPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DriverManager/GetSonarDataRPC',
            api__pb2.GetRequest.SerializeToString,
            api__pb2.SonarData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAnalogDataRPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DriverManager/GetAnalogDataRPC',
            api__pb2.GetRequest.SerializeToString,
            api__pb2.AnalogData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAttitudeDataRPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DriverManager/GetAttitudeDataRPC',
            api__pb2.GetRequest.SerializeToString,
            api__pb2.AttitudeData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOdometryDataRPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DriverManager/GetOdometryDataRPC',
            api__pb2.GetRequest.SerializeToString,
            api__pb2.OdometryData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOpticalFlowDataRPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DriverManager/GetOpticalFlowDataRPC',
            api__pb2.GetRequest.SerializeToString,
            api__pb2.OpticalFlowData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFlagsDataRPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DriverManager/GetFlagsDataRPC',
            api__pb2.GetRequest.SerializeToString,
            api__pb2.FlagsData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendRcDataRPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DriverManager/SendRcDataRPC',
            api__pb2.RcDataData.SerializeToString,
            api__pb2.StatusData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class NavigationManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TakeOFF = channel.unary_unary(
                '/NavigationManager/TakeOFF',
                request_serializer=api__pb2.CommandData.SerializeToString,
                response_deserializer=api__pb2.StatusData.FromString,
                _registered_method=True)
        self.Land = channel.unary_unary(
                '/NavigationManager/Land',
                request_serializer=api__pb2.CommandData.SerializeToString,
                response_deserializer=api__pb2.StatusData.FromString,
                _registered_method=True)
        self.Move = channel.unary_unary(
                '/NavigationManager/Move',
                request_serializer=api__pb2.PointData.SerializeToString,
                response_deserializer=api__pb2.StatusData.FromString,
                _registered_method=True)
        self.SetVelocity = channel.unary_unary(
                '/NavigationManager/SetVelocity',
                request_serializer=api__pb2.VelocityData.SerializeToString,
                response_deserializer=api__pb2.StatusData.FromString,
                _registered_method=True)
        self.SetSettings = channel.unary_unary(
                '/NavigationManager/SetSettings',
                request_serializer=api__pb2.SettingsData.SerializeToString,
                response_deserializer=api__pb2.StatusData.FromString,
                _registered_method=True)


class NavigationManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TakeOFF(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Land(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Move(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetVelocity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSettings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NavigationManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TakeOFF': grpc.unary_unary_rpc_method_handler(
                    servicer.TakeOFF,
                    request_deserializer=api__pb2.CommandData.FromString,
                    response_serializer=api__pb2.StatusData.SerializeToString,
            ),
            'Land': grpc.unary_unary_rpc_method_handler(
                    servicer.Land,
                    request_deserializer=api__pb2.CommandData.FromString,
                    response_serializer=api__pb2.StatusData.SerializeToString,
            ),
            'Move': grpc.unary_unary_rpc_method_handler(
                    servicer.Move,
                    request_deserializer=api__pb2.PointData.FromString,
                    response_serializer=api__pb2.StatusData.SerializeToString,
            ),
            'SetVelocity': grpc.unary_unary_rpc_method_handler(
                    servicer.SetVelocity,
                    request_deserializer=api__pb2.VelocityData.FromString,
                    response_serializer=api__pb2.StatusData.SerializeToString,
            ),
            'SetSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSettings,
                    request_deserializer=api__pb2.SettingsData.FromString,
                    response_serializer=api__pb2.StatusData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'NavigationManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('NavigationManager', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NavigationManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TakeOFF(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NavigationManager/TakeOFF',
            api__pb2.CommandData.SerializeToString,
            api__pb2.StatusData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Land(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NavigationManager/Land',
            api__pb2.CommandData.SerializeToString,
            api__pb2.StatusData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Move(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NavigationManager/Move',
            api__pb2.PointData.SerializeToString,
            api__pb2.StatusData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetVelocity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NavigationManager/SetVelocity',
            api__pb2.VelocityData.SerializeToString,
            api__pb2.StatusData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NavigationManager/SetSettings',
            api__pb2.SettingsData.SerializeToString,
            api__pb2.StatusData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
