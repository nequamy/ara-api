# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from driver.protoc import driver_pb2 as driver__pb2
from navigation.protoc import navigation_pb2 as navigation__pb2
from stream.protoc import stream_pb2 as stream__pb2
from web.protoc import web_pb2 as web__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in web_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class WebServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetConnectionIP = channel.unary_unary(
                '/WebService/SetConnectionIP',
                request_serializer=web__pb2.ConnectionIPRequest.SerializeToString,
                response_deserializer=web__pb2.ConnectionIPResponse.FromString,
                _registered_method=True)
        self.ManageConnectionIPs = channel.unary_unary(
                '/WebService/ManageConnectionIPs',
                request_serializer=web__pb2.ManageConnectionIPsRequest.SerializeToString,
                response_deserializer=web__pb2.ManageConnectionIPsResponse.FromString,
                _registered_method=True)
        self.ConfigureModules = channel.unary_unary(
                '/WebService/ConfigureModules',
                request_serializer=web__pb2.ModuleConfigRequest.SerializeToString,
                response_deserializer=web__pb2.ModuleConfigResponse.FromString,
                _registered_method=True)
        self.SetVelocity = channel.unary_stream(
                '/WebService/SetVelocity',
                request_serializer=navigation__pb2.VelocityRequest.SerializeToString,
                response_deserializer=navigation__pb2.VelocityResponse.FromString,
                _registered_method=True)
        self.SetTargetPosition = channel.unary_stream(
                '/WebService/SetTargetPosition',
                request_serializer=navigation__pb2.PositionRequest.SerializeToString,
                response_deserializer=navigation__pb2.PositionResponse.FromString,
                _registered_method=True)
        self.SetTargetAltitude = channel.unary_stream(
                '/WebService/SetTargetAltitude',
                request_serializer=navigation__pb2.AltitudeRequest.SerializeToString,
                response_deserializer=navigation__pb2.AltitudeResponse.FromString,
                _registered_method=True)
        self.Takeoff = channel.unary_stream(
                '/WebService/Takeoff',
                request_serializer=navigation__pb2.TakeoffRequest.SerializeToString,
                response_deserializer=navigation__pb2.TakeoffResponse.FromString,
                _registered_method=True)
        self.Land = channel.unary_stream(
                '/WebService/Land',
                request_serializer=navigation__pb2.LandRequest.SerializeToString,
                response_deserializer=navigation__pb2.LandResponse.FromString,
                _registered_method=True)
        self.GetSensorData = channel.unary_stream(
                '/WebService/GetSensorData',
                request_serializer=driver__pb2.SensorDataRequest.SerializeToString,
                response_deserializer=driver__pb2.SensorDataResponse.FromString,
                _registered_method=True)
        self.SendRCData = channel.stream_unary(
                '/WebService/SendRCData',
                request_serializer=driver__pb2.RCOutDataRequest.SerializeToString,
                response_deserializer=driver__pb2.RCOutDataResponse.FromString,
                _registered_method=True)
        self.GetRawImage = channel.unary_unary(
                '/WebService/GetRawImage',
                request_serializer=stream__pb2.ImageRequest.SerializeToString,
                response_deserializer=stream__pb2.ImageResponse.FromString,
                _registered_method=True)
        self.GetProcessedImage = channel.unary_unary(
                '/WebService/GetProcessedImage',
                request_serializer=stream__pb2.ImageRequest.SerializeToString,
                response_deserializer=stream__pb2.ImageResponse.FromString,
                _registered_method=True)
        self.StartImageStream = channel.unary_unary(
                '/WebService/StartImageStream',
                request_serializer=stream__pb2.StreamRequest.SerializeToString,
                response_deserializer=stream__pb2.StreamResponse.FromString,
                _registered_method=True)
        self.StopImageStream = channel.unary_unary(
                '/WebService/StopImageStream',
                request_serializer=stream__pb2.StreamRequest.SerializeToString,
                response_deserializer=stream__pb2.StreamResponse.FromString,
                _registered_method=True)


class WebServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetConnectionIP(self, request, context):
        """Установка IP для подключения
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ManageConnectionIPs(self, request, context):
        """Добавление/Удаление IP для подключения
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureModules(self, request, context):
        """Настройка параметров для модулей
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetVelocity(self, request, context):
        """Доступ к методам NavigationService
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTargetPosition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTargetAltitude(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Takeoff(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Land(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSensorData(self, request, context):
        """Доступ к методам DriverService
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendRCData(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRawImage(self, request, context):
        """Доступ к методам StreamService
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProcessedImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartImageStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopImageStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WebServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetConnectionIP': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConnectionIP,
                    request_deserializer=web__pb2.ConnectionIPRequest.FromString,
                    response_serializer=web__pb2.ConnectionIPResponse.SerializeToString,
            ),
            'ManageConnectionIPs': grpc.unary_unary_rpc_method_handler(
                    servicer.ManageConnectionIPs,
                    request_deserializer=web__pb2.ManageConnectionIPsRequest.FromString,
                    response_serializer=web__pb2.ManageConnectionIPsResponse.SerializeToString,
            ),
            'ConfigureModules': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureModules,
                    request_deserializer=web__pb2.ModuleConfigRequest.FromString,
                    response_serializer=web__pb2.ModuleConfigResponse.SerializeToString,
            ),
            'SetVelocity': grpc.unary_stream_rpc_method_handler(
                    servicer.SetVelocity,
                    request_deserializer=navigation__pb2.VelocityRequest.FromString,
                    response_serializer=navigation__pb2.VelocityResponse.SerializeToString,
            ),
            'SetTargetPosition': grpc.unary_stream_rpc_method_handler(
                    servicer.SetTargetPosition,
                    request_deserializer=navigation__pb2.PositionRequest.FromString,
                    response_serializer=navigation__pb2.PositionResponse.SerializeToString,
            ),
            'SetTargetAltitude': grpc.unary_stream_rpc_method_handler(
                    servicer.SetTargetAltitude,
                    request_deserializer=navigation__pb2.AltitudeRequest.FromString,
                    response_serializer=navigation__pb2.AltitudeResponse.SerializeToString,
            ),
            'Takeoff': grpc.unary_stream_rpc_method_handler(
                    servicer.Takeoff,
                    request_deserializer=navigation__pb2.TakeoffRequest.FromString,
                    response_serializer=navigation__pb2.TakeoffResponse.SerializeToString,
            ),
            'Land': grpc.unary_stream_rpc_method_handler(
                    servicer.Land,
                    request_deserializer=navigation__pb2.LandRequest.FromString,
                    response_serializer=navigation__pb2.LandResponse.SerializeToString,
            ),
            'GetSensorData': grpc.unary_stream_rpc_method_handler(
                    servicer.GetSensorData,
                    request_deserializer=driver__pb2.SensorDataRequest.FromString,
                    response_serializer=driver__pb2.SensorDataResponse.SerializeToString,
            ),
            'SendRCData': grpc.stream_unary_rpc_method_handler(
                    servicer.SendRCData,
                    request_deserializer=driver__pb2.RCOutDataRequest.FromString,
                    response_serializer=driver__pb2.RCOutDataResponse.SerializeToString,
            ),
            'GetRawImage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRawImage,
                    request_deserializer=stream__pb2.ImageRequest.FromString,
                    response_serializer=stream__pb2.ImageResponse.SerializeToString,
            ),
            'GetProcessedImage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProcessedImage,
                    request_deserializer=stream__pb2.ImageRequest.FromString,
                    response_serializer=stream__pb2.ImageResponse.SerializeToString,
            ),
            'StartImageStream': grpc.unary_unary_rpc_method_handler(
                    servicer.StartImageStream,
                    request_deserializer=stream__pb2.StreamRequest.FromString,
                    response_serializer=stream__pb2.StreamResponse.SerializeToString,
            ),
            'StopImageStream': grpc.unary_unary_rpc_method_handler(
                    servicer.StopImageStream,
                    request_deserializer=stream__pb2.StreamRequest.FromString,
                    response_serializer=stream__pb2.StreamResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'WebService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('WebService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WebService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetConnectionIP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/WebService/SetConnectionIP',
            web__pb2.ConnectionIPRequest.SerializeToString,
            web__pb2.ConnectionIPResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ManageConnectionIPs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/WebService/ManageConnectionIPs',
            web__pb2.ManageConnectionIPsRequest.SerializeToString,
            web__pb2.ManageConnectionIPsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfigureModules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/WebService/ConfigureModules',
            web__pb2.ModuleConfigRequest.SerializeToString,
            web__pb2.ModuleConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetVelocity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/WebService/SetVelocity',
            navigation__pb2.VelocityRequest.SerializeToString,
            navigation__pb2.VelocityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTargetPosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/WebService/SetTargetPosition',
            navigation__pb2.PositionRequest.SerializeToString,
            navigation__pb2.PositionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTargetAltitude(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/WebService/SetTargetAltitude',
            navigation__pb2.AltitudeRequest.SerializeToString,
            navigation__pb2.AltitudeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Takeoff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/WebService/Takeoff',
            navigation__pb2.TakeoffRequest.SerializeToString,
            navigation__pb2.TakeoffResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Land(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/WebService/Land',
            navigation__pb2.LandRequest.SerializeToString,
            navigation__pb2.LandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSensorData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/WebService/GetSensorData',
            driver__pb2.SensorDataRequest.SerializeToString,
            driver__pb2.SensorDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendRCData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/WebService/SendRCData',
            driver__pb2.RCOutDataRequest.SerializeToString,
            driver__pb2.RCOutDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRawImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/WebService/GetRawImage',
            stream__pb2.ImageRequest.SerializeToString,
            stream__pb2.ImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetProcessedImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/WebService/GetProcessedImage',
            stream__pb2.ImageRequest.SerializeToString,
            stream__pb2.ImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartImageStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/WebService/StartImageStream',
            stream__pb2.StreamRequest.SerializeToString,
            stream__pb2.StreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopImageStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/WebService/StopImageStream',
            stream__pb2.StreamRequest.SerializeToString,
            stream__pb2.StreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
